{"version":3,"file":"static/js/440.2cff7a02.chunk.js","mappings":"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","sources":["../node_modules/@react-three/drei/core/RoundedBox.js","components/Platform/Platform.jsx"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Shape } from 'three';\nimport { toCreasedNormals } from 'three-stdlib';\n\nconst eps = 0.00001;\nfunction createShape(width, height, radius0) {\n  const shape = new Shape();\n  const radius = radius0 - eps;\n  shape.absarc(eps, eps, eps, -Math.PI / 2, -Math.PI, true);\n  shape.absarc(eps, height - radius * 2, eps, Math.PI, Math.PI / 2, true);\n  shape.absarc(width - radius * 2, height - radius * 2, eps, Math.PI / 2, 0, true);\n  shape.absarc(width - radius * 2, eps, eps, 0, -Math.PI / 2, true);\n  return shape;\n}\nconst RoundedBox = /* @__PURE__ */React.forwardRef(function RoundedBox({\n  args: [width = 1, height = 1, depth = 1] = [],\n  radius = 0.05,\n  steps = 1,\n  smoothness = 4,\n  bevelSegments = 4,\n  creaseAngle = 0.4,\n  children,\n  ...rest\n}, ref) {\n  const shape = React.useMemo(() => createShape(width, height, radius), [width, height, radius]);\n  const params = React.useMemo(() => ({\n    depth: depth - radius * 2,\n    bevelEnabled: true,\n    bevelSegments: bevelSegments * 2,\n    steps,\n    bevelSize: radius - eps,\n    bevelThickness: radius,\n    curveSegments: smoothness\n  }), [depth, radius, smoothness]);\n  const geomRef = React.useRef(null);\n  React.useLayoutEffect(() => {\n    if (geomRef.current) {\n      geomRef.current.center();\n      toCreasedNormals(geomRef.current, creaseAngle);\n    }\n  }, [shape, params]);\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref\n  }, rest), /*#__PURE__*/React.createElement(\"extrudeGeometry\", {\n    ref: geomRef,\n    args: [shape, params]\n  }), children);\n});\n\nexport { RoundedBox };\n","import * as THREE from 'three';\nimport { useFrame } from '@react-three/fiber';\nimport { forwardRef, useImperativeHandle, useRef } from 'react';\nimport { useBox } from '@react-three/cannon';\nimport { RoundedBox } from '@react-three/drei';\nimport pingSound from '../../sounds/ping.mp3';\n\nconst ping = new Audio(pingSound);\n\nconst Platform = forwardRef(\n  (\n    {\n      shake = 0,\n      args = [6, 1.5, 4],\n      color = 0xffff00,\n      vec = new THREE.Vector3(),\n      ...props\n    },\n    ref\n  ) => {\n    const group = useRef();\n\n    const [block, api] = useBox(() => ({\n      args,\n      ...props,\n      type: 'Kinematic',\n      restitution: 10,\n      onCollide: e => {\n        const velocity = e.contact.impactVelocity;\n        playSound(velocity);\n        shake += velocity / 12.5; // Adjust shake logic if necessary\n      },\n    }));\n\n    const playSound = velocity => {\n      ping.currentTime = 0; // Reset sound playback\n      ping.volume = Math.min(1, Math.max(0, velocity / 20)); // Clamp volume based on velocity\n      ping.play().catch(error => {\n        console.warn('Audio playback failed:', error);\n      });\n    };\n\n    useFrame(() => {\n      group.current.position.lerp(\n        vec.set(0, (shake = THREE.MathUtils.lerp(shake, 0, 0.1)), 0),\n        0.2\n      );\n    });\n\n    useImperativeHandle(ref, () => api, [api]);\n\n    return (\n      <>\n        <group ref={group}>\n          <RoundedBox ref={block} args={args} radius={0.5} smoothness={10}>\n            <meshPhysicalMaterial\n              transmission={0.2}\n              roughness={0}\n              thickness={3}\n              envMapIntensity={4}\n              color={color}\n            />\n          </RoundedBox>\n        </group>\n      </>\n    );\n  }\n);\n\nexport default Platform;\n"],"names":["eps","RoundedBox","React","_ref","ref","args","width","height","depth","radius","steps","smoothness","bevelSegments","creaseAngle","children","rest","shape","radius0","Shape","absarc","Math","PI","createShape","params","bevelEnabled","bevelSize","bevelThickness","curveSegments","geomRef","current","center","toCreasedNormals","_extends","ping","Audio","pingSound","forwardRef","shake","color","vec","THREE","props","group","useRef","block","api","useBox","type","restitution","onCollide","e","velocity","contact","impactVelocity","playSound","currentTime","volume","min","max","play","catch","error","console","warn","useFrame","position","lerp","set","useImperativeHandle","_jsx","_Fragment","transmission","roughness","thickness","envMapIntensity"],"sourceRoot":""}