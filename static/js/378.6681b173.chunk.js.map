{"version":3,"file":"static/js/378.6681b173.chunk.js","mappings":"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","sources":["webpack://aqua-bounce/./src/components/Preload/Preload.module.css?4bcc","../node_modules/src/geometries/TextGeometry.ts","../node_modules/src/loaders/FontLoader.ts","../node_modules/@react-three/drei/core/useFont.js","../node_modules/@react-three/drei/core/Text3D.js","components/Preload/Preload.jsx","components/Scene.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Preload_container__6zQeX\",\"wrapper\":\"Preload_wrapper__cybGs\",\"btnWrapper\":\"Preload_btnWrapper__qTMAF\",\"text\":\"Preload_text__NI4gP\"};","import { ExtrudeGeometry } from 'three'\n\nimport type { Font } from '../loaders/FontLoader'\n\nexport type TextGeometryParameters = {\n  bevelEnabled?: boolean\n  bevelOffset?: number\n  bevelSize?: number\n  bevelThickness?: number\n  curveSegments?: number\n  font: Font\n  height?: number\n  size?: number\n  lineHeight?: number\n  letterSpacing?: number\n}\n\nexport class TextGeometry extends ExtrudeGeometry {\n  constructor(text: string, parameters: TextGeometryParameters = {} as TextGeometryParameters) {\n    const {\n      bevelEnabled = false,\n      bevelSize = 8,\n      bevelThickness = 10,\n      font,\n      height = 50,\n      size = 100,\n      lineHeight = 1,\n      letterSpacing = 0,\n      ...rest\n    } = parameters\n\n    if (font === undefined) {\n      // @ts-ignore\n      super() // generate default extrude geometry\n    } else {\n      const shapes = font.generateShapes(text, size, { lineHeight, letterSpacing })\n      super(shapes, { ...rest, bevelEnabled, bevelSize, bevelThickness, depth: height })\n    }\n    // @ts-ignore\n    this.type = 'TextGeometry'\n  }\n}\n\nexport { TextGeometry as TextBufferGeometry }\n","import { Loader, FileLoader, ShapePath } from 'three'\n\nimport type { LoadingManager, Shape } from 'three'\n\ntype Options = {\n  lineHeight: number\n  letterSpacing: number\n}\n\nexport class FontLoader extends Loader {\n  constructor(manager?: LoadingManager) {\n    super(manager)\n  }\n\n  public load(\n    url: string,\n    onLoad?: (responseFont: Font) => void,\n    onProgress?: (event: ProgressEvent) => void,\n    onError?: (event: ErrorEvent) => void,\n  ): void {\n    const loader = new FileLoader(this.manager)\n\n    loader.setPath(this.path)\n    loader.setRequestHeader(this.requestHeader)\n    loader.setWithCredentials(this.withCredentials)\n\n    loader.load(\n      url,\n      (response) => {\n        if (typeof response !== 'string') throw new Error('unsupported data type')\n\n        const json = JSON.parse(response)\n\n        const font = this.parse(json)\n\n        if (onLoad) onLoad(font)\n      },\n      onProgress,\n      onError as (event: unknown) => void,\n    )\n  }\n\n  loadAsync(url: string, onProgress?: (event: ProgressEvent) => void): Promise<Font> {\n    // @ts-ignore\n    return super.loadAsync(url, onProgress)\n  }\n\n  public parse(json: FontData): Font {\n    return new Font(json)\n  }\n}\n\ntype Glyph = {\n  _cachedOutline: string[]\n  ha: number\n  o: string\n}\n\ntype FontData = {\n  boundingBox: { yMax: number; yMin: number }\n  familyName: string\n  glyphs: { [k: string]: Glyph }\n  resolution: number\n  underlineThickness: number\n}\n\nexport class Font {\n  public data: FontData\n  public static isFont: true\n  public static type: 'Font'\n\n  constructor(data: FontData) {\n    this.data = data\n  }\n\n  public generateShapes(text: string, size = 100, _options?: Partial<Options>): Shape[] {\n    const shapes: Shape[] = []\n    const options = { letterSpacing: 0, lineHeight: 1, ..._options }\n    const paths = createPaths(text, size, this.data, options)\n    for (let p = 0, pl = paths.length; p < pl; p++) {\n      Array.prototype.push.apply(shapes, paths[p].toShapes(false))\n    }\n    return shapes\n  }\n}\n\nfunction createPaths(text: string, size: number, data: FontData, options: Options): ShapePath[] {\n  const chars = Array.from(text)\n  const scale = size / data.resolution\n  const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale\n\n  const paths: ShapePath[] = []\n\n  let offsetX = 0,\n    offsetY = 0\n\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i]\n\n    if (char === '\\n') {\n      offsetX = 0\n      offsetY -= line_height * options.lineHeight\n    } else {\n      const ret = createPath(char, scale, offsetX, offsetY, data)\n      if (ret) {\n        offsetX += ret.offsetX + options.letterSpacing\n        paths.push(ret.path)\n      }\n    }\n  }\n\n  return paths\n}\n\nfunction createPath(\n  char: string,\n  scale: number,\n  offsetX: number,\n  offsetY: number,\n  data: FontData,\n): { offsetX: number; path: ShapePath } | undefined {\n  const glyph = data.glyphs[char] || data.glyphs['?']\n\n  if (!glyph) {\n    console.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.')\n    return\n  }\n\n  const path = new ShapePath()\n\n  let x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2\n\n  if (glyph.o) {\n    const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '))\n\n    for (let i = 0, l = outline.length; i < l; ) {\n      const action = outline[i++]\n\n      switch (action) {\n        case 'm': // moveTo\n          x = parseInt(outline[i++]) * scale + offsetX\n          y = parseInt(outline[i++]) * scale + offsetY\n\n          path.moveTo(x, y)\n\n          break\n\n        case 'l': // lineTo\n          x = parseInt(outline[i++]) * scale + offsetX\n          y = parseInt(outline[i++]) * scale + offsetY\n\n          path.lineTo(x, y)\n\n          break\n\n        case 'q': // quadraticCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX\n          cpy = parseInt(outline[i++]) * scale + offsetY\n          cpx1 = parseInt(outline[i++]) * scale + offsetX\n          cpy1 = parseInt(outline[i++]) * scale + offsetY\n\n          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy)\n\n          break\n\n        case 'b': // bezierCurveTo\n          cpx = parseInt(outline[i++]) * scale + offsetX\n          cpy = parseInt(outline[i++]) * scale + offsetY\n          cpx1 = parseInt(outline[i++]) * scale + offsetX\n          cpy1 = parseInt(outline[i++]) * scale + offsetY\n          cpx2 = parseInt(outline[i++]) * scale + offsetX\n          cpy2 = parseInt(outline[i++]) * scale + offsetY\n\n          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy)\n\n          break\n      }\n    }\n  }\n\n  return { offsetX: glyph.ha * scale, path }\n}\n","import { FontLoader } from 'three-stdlib';\nimport { suspend, preload, clear } from 'suspend-react';\n\nlet fontLoader = null;\nasync function loadFontData(font) {\n  return typeof font === 'string' ? await (await fetch(font)).json() : font;\n}\nfunction parseFontData(fontData) {\n  if (!fontLoader) {\n    fontLoader = new FontLoader();\n  }\n  return fontLoader.parse(fontData);\n}\nasync function loader(font) {\n  const data = await loadFontData(font);\n  return parseFontData(data);\n}\nfunction useFont(font) {\n  return suspend(loader, [font]);\n}\nuseFont.preload = font => preload(loader, [font]);\nuseFont.clear = font => clear([font]);\n\nexport { useFont };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { extend } from '@react-three/fiber';\nimport { TextGeometry, mergeVertices } from 'three-stdlib';\nimport { useFont } from './useFont.js';\n\nconst types = ['string', 'number'];\nconst getTextFromChildren = children => {\n  let label = '';\n  const rest = [];\n  React.Children.forEach(children, child => {\n    if (types.includes(typeof child)) label += child + '';else rest.push(child);\n  });\n  return [label, ...rest];\n};\nconst Text3D = /* @__PURE__ */React.forwardRef(({\n  font: _font,\n  letterSpacing = 0,\n  lineHeight = 1,\n  size = 1,\n  height = 0.2,\n  bevelThickness = 0.1,\n  bevelSize = 0.01,\n  bevelEnabled = false,\n  bevelOffset = 0,\n  bevelSegments = 4,\n  curveSegments = 8,\n  smooth,\n  children,\n  ...props\n}, fref) => {\n  React.useMemo(() => extend({\n    RenamedTextGeometry: TextGeometry\n  }), []);\n  const ref = React.useRef(null);\n  const font = useFont(_font);\n  const opts = useMemo(() => {\n    return {\n      font,\n      size,\n      height,\n      bevelThickness,\n      bevelSize,\n      bevelEnabled,\n      bevelSegments,\n      bevelOffset,\n      curveSegments,\n      letterSpacing,\n      lineHeight\n    };\n  }, [font, size, height, bevelThickness, bevelSize, bevelEnabled, bevelSegments, bevelOffset, curveSegments, letterSpacing, lineHeight]);\n\n  /**\n   * We need the `children` in the deps because we\n   * need to be able to do `<Text3d>{state}</Text3d>`.\n   */\n  const [label, ...rest] = useMemo(() => getTextFromChildren(children), [children]);\n  const args = React.useMemo(() => [label, opts], [label, opts]);\n  React.useLayoutEffect(() => {\n    if (smooth) {\n      ref.current.geometry = mergeVertices(ref.current.geometry, smooth);\n      ref.current.geometry.computeVertexNormals();\n    }\n  }, [args, smooth]);\n  React.useImperativeHandle(fref, () => ref.current, []);\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"renamedTextGeometry\", {\n    args: args\n  }), rest);\n});\n\nexport { Text3D };\n","import React, { useRef } from 'react';\nimport Button from '../Button/Button';\nimport css from './Preload.module.css';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { Sky, Text3D } from '@react-three/drei';\nimport { Physics } from '@react-three/cannon';\nimport font from '../../font/helvetiker_bold.typeface.json';\nimport Scene from '../Scene';\nconst Ocean = React.lazy(() => import('../Ocean/Ocean'));\n\nconst AnimatedText = () => {\n  const textRef = useRef();\n\n  useFrame(state => {\n    const t = state.clock.getElapsedTime();\n    textRef.current.position.y = 1.8 + Math.sin(t * 2) * 3;\n  });\n\n  return (\n    <Text3D\n      ref={textRef}\n      font={font}\n      size={4}\n      height={1}\n      curveSegments={40}\n      bevelEnabled\n      bevelThickness={0.1}\n      bevelSize={0.01}\n      bevelSegments={20}\n      position={[-17, -0.2, -10]}\n      rotation={[-Math.PI / 2.3, 0, 0]}\n      material-toneMapped={true}\n    >\n      Aqua Bounce\n      <meshPhysicalMaterial transmission={0} color={'#ffff00'} />\n    </Text3D>\n  );\n};\n\nconst Preload = ({ handleStartBtnClick }) => {\n  return (\n    <>\n      <div className={css.container}>\n        <Canvas dpr={1.5} camera={{ position: [0, 20, 2], fov: 100 }}>\n          <Physics>\n            <Scene>\n              <AnimatedText />\n              <Sky\n                distance={500000}\n                sunPosition={[0, 50, 100]}\n                inclination={0}\n                azimuth={0.25}\n              />\n              <Ocean />\n            </Scene>\n          </Physics>\n        </Canvas>\n        <div className={css.wrapper}>\n          <p className={css.text}>Keep the ball in play as long as possible!</p>\n          <div className={css.btnWrapper}>\n            <Button text={'Lets go!'} onClick={handleStartBtnClick} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Preload;\n","import React from 'react';\nimport { OrbitControls } from '@react-three/drei';\n\nconst Scene = ({ children }) => {\n  return (\n    <>\n      <ambientLight intensity={0.5} />\n      <directionalLight position={[0, 5, 5]} intensity={1} />\n      <OrbitControls\n      // enableRotate={false}\n      // enablePan={false}\n      // enableZoom={false}\n      />\n      {children}\n    </>\n  );\n};\n\nexport default Scene;\n"],"names":["TextGeometry","ExtrudeGeometry","constructor","text","parameters","arguments","length","undefined","bevelEnabled","bevelSize","bevelThickness","font","height","size","lineHeight","letterSpacing","rest","generateShapes","depth","this","type","FontLoader","Loader","manager","super","load","url","onLoad","onProgress","onError","loader","FileLoader","setPath","path","setRequestHeader","requestHeader","setWithCredentials","withCredentials","response","Error","json","JSON","parse","loadAsync","Font","data","__publicField","shapes","options","paths","chars","Array","from","scale","resolution","line_height","boundingBox","yMax","yMin","underlineThickness","offsetX","offsetY","i","char","ret","createPath","push","createPaths","p","pl","prototype","apply","toShapes","glyph","glyphs","console","error","familyName","ShapePath","x","y","cpx","cpy","cpx1","cpy1","cpx2","cpy2","o","outline","_cachedOutline","split","l","parseInt","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha","fontLoader","async","fetch","loadFontData","fontData","useFont","suspend","preload","clear","types","Text3D","React","_ref","fref","_font","bevelOffset","bevelSegments","curveSegments","smooth","children","props","extend","RenamedTextGeometry","ref","opts","useMemo","label","forEach","child","includes","getTextFromChildren","args","current","geometry","mergeVertices","computeVertexNormals","_extends","Ocean","AnimatedText","textRef","useRef","useFrame","state","t","clock","getElapsedTime","position","Math","sin","_jsxs","rotation","PI","_jsx","transmission","color","handleStartBtnClick","_Fragment","className","css","Canvas","dpr","camera","fov","Physics","Scene","Sky","distance","sunPosition","inclination","azimuth","Button","onClick","intensity","OrbitControls"],"sourceRoot":""}