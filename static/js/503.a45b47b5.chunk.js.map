{"version":3,"file":"static/js/503.a45b47b5.chunk.js","mappings":"8KAKA,MAAMA,EAAWC,GAAOA,IAAQC,OAAOD,KAASE,MAAMC,QAAQH,IAAuB,oBAARA,EAC7E,SAASI,EAAWC,EAAOC,GACzB,MAAMC,GAAKC,EAAAA,EAAAA,IAASC,GAASA,EAAMF,KAC7BG,GAAWC,EAAAA,EAAAA,GAAUC,EAAAA,cAAeb,EAASM,GAASJ,OAAOY,OAAOR,GAASA,IACnFS,EAAAA,EAAAA,kBAAgB,KACJ,MAAVR,GAAkBA,EAAOI,EAAS,GACjC,CAACJ,KAKJS,EAAAA,EAAAA,YAAU,KACR,GAAI,gBAAiBR,EAAI,CACvB,IAAIS,EAAe,GACfd,MAAMC,QAAQO,GAChBM,EAAeN,EACNA,aAAoBO,EAAAA,QAC7BD,EAAe,CAACN,GACPX,EAASW,KAClBM,EAAef,OAAOY,OAAOH,IAE/BM,EAAaE,SAAQC,IACfA,aAAmBF,EAAAA,SACrBV,EAAGa,YAAYD,EACjB,GAEJ,IACC,CAACZ,EAAIG,IAWR,OAVuBW,EAAAA,EAAAA,UAAQ,KAC7B,GAAItB,EAASM,GAAQ,CACnB,MAAMiB,EAAQ,CAAC,EACf,IAAIC,EAAI,EACR,IAAK,MAAMC,KAAOnB,EAAOiB,EAAME,GAAOd,EAASa,KAC/C,OAAOD,CACT,CACE,OAAOZ,CACT,GACC,CAACL,EAAOK,GAEb,CACAN,EAAWqB,QAAUzB,GAAOW,EAAAA,EAAUc,QAAQb,EAAAA,cAAeZ,GAC7DI,EAAWsB,MAAQrB,GAASM,EAAAA,EAAUe,MAAMd,EAAAA,cAAeP,GAI3D,M,mHC3CA,MAAMsB,EAAO,IAAIC,MAAMC,GA4CvB,EA1CaC,IAA+D,IAA9D,KAAEC,EAAO,CAAC,EAAG,GAAI,IAAG,EAAEC,EAAI,IAAIC,EAAAA,QAAe,QAAEC,GAASJ,EACpE,MAAOK,EAAYC,IAAiBC,EAAAA,EAAAA,WAAS,IACtCC,EAAKC,IAAOC,EAAAA,EAAAA,KAAU,MAC3BT,KAAM,CAAC,GACPU,KAAM,EACNC,SAAU,CAAEC,YAAa,KACzBC,SAAU,CAAiB,GAAhBC,KAAKC,SAAgB,GAAI,GAAI,OAoB1C,OAjBA/B,EAAAA,EAAAA,YAAU,KACR,MAAMgC,EAAcR,EAAIK,SAASI,WAAUJ,IACrCA,EAAS,GAAK,IAAMT,IACtBC,GAAc,GACdG,EAAIU,SAASC,IAAI,EAAG,EAAG,GACvBX,EAAIK,SAASM,IAAIN,EAAS,GAAI,GAAKA,EAAS,IAC5CL,EAAIE,KAAKS,IAAI,GAEbvB,EAAKwB,YAAc,EACnBxB,EAAKyB,OAELlB,IACF,IAGF,MAAO,IAAMa,GAAa,GACzB,CAACR,EAAIK,SAAUV,EAASC,EAAYI,EAAIU,SAAUV,EAAIE,QAEvDY,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,QAAMlB,IAAKA,EAAIiB,SAAA,EACbF,EAAAA,EAAAA,KAAA,kBAAgBtB,KAAMA,KACtBsB,EAAAA,EAAAA,KAAA,wBACEI,IAAKrD,EAAWsD,GAChBC,UAAW,EACXC,UAAW,GACXC,gBAAiB,EACjBC,MAAM,eAGT,C","sources":["../node_modules/@react-three/drei/core/Texture.js","components/Ball/Ball.jsx"],"sourcesContent":["import * as React from 'react';\nimport { useLayoutEffect, useEffect, useMemo } from 'react';\nimport { TextureLoader, Texture as Texture$1 } from 'three';\nimport { useThree, useLoader } from '@react-three/fiber';\n\nconst IsObject = url => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\nfunction useTexture(input, onLoad) {\n  const gl = useThree(state => state.gl);\n  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input);\n  useLayoutEffect(() => {\n    onLoad == null || onLoad(textures);\n  }, [onLoad]);\n\n  // https://github.com/mrdoob/three.js/issues/22696\n  // Upload the texture to the GPU immediately instead of waiting for the first render\n  // NOTE: only available for WebGLRenderer\n  useEffect(() => {\n    if ('initTexture' in gl) {\n      let textureArray = [];\n      if (Array.isArray(textures)) {\n        textureArray = textures;\n      } else if (textures instanceof Texture$1) {\n        textureArray = [textures];\n      } else if (IsObject(textures)) {\n        textureArray = Object.values(textures);\n      }\n      textureArray.forEach(texture => {\n        if (texture instanceof Texture$1) {\n          gl.initTexture(texture);\n        }\n      });\n    }\n  }, [gl, textures]);\n  const mappedTextures = useMemo(() => {\n    if (IsObject(input)) {\n      const keyed = {};\n      let i = 0;\n      for (const key in input) keyed[key] = textures[i++];\n      return keyed;\n    } else {\n      return textures;\n    }\n  }, [input, textures]);\n  return mappedTextures;\n}\nuseTexture.preload = url => useLoader.preload(TextureLoader, url);\nuseTexture.clear = input => useLoader.clear(TextureLoader, input);\n\n//\n\nconst Texture = ({\n  children,\n  input,\n  onLoad\n}) => {\n  const ret = useTexture(input, onLoad);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children == null ? void 0 : children(ret));\n};\n\nexport { IsObject, Texture, useTexture };\n","import * as THREE from 'three';\nimport { useSphere } from '@react-three/cannon';\nimport { useEffect, useState } from 'react';\nimport { useTexture } from '@react-three/drei';\nimport plopSound from '../../sounds/plop.mp3';\nimport ballLogo from '../../imgs/logo.jpg';\n\nconst plop = new Audio(plopSound);\n\nconst Ball = ({ args = [1, 64, 64], v = new THREE.Vector3(), onReset }) => {\n  const [isFloating, setIsFloating] = useState(false);\n  const [ref, api] = useSphere(() => ({\n    args: [1],\n    mass: 1,\n    material: { restitution: 0.95 },\n    position: [Math.random() * 20 - 10, 40, 0],\n  }));\n\n  useEffect(() => {\n    const unsubscribe = api.position.subscribe(position => {\n      if (position[1] < 0 && !isFloating) {\n        setIsFloating(true);\n        api.velocity.set(0, 0, 0);\n        api.position.set(position[0], 0.5, position[2]);\n        api.mass.set(0);\n\n        plop.currentTime = 0;\n        plop.play();\n\n        onReset();\n      }\n    });\n\n    return () => unsubscribe();\n  }, [api.position, onReset, isFloating, api.velocity, api.mass]);\n  return (\n    <>\n      <mesh ref={ref}>\n        <sphereGeometry args={args} />\n        <meshStandardMaterial\n          map={useTexture(ballLogo)}\n          roughness={0}\n          thickness={10}\n          envMapIntensity={1}\n          color=\"orange\"\n        />\n      </mesh>\n    </>\n  );\n};\n\nexport default Ball;\n"],"names":["IsObject","url","Object","Array","isArray","useTexture","input","onLoad","gl","useThree","state","textures","useLoader","TextureLoader","values","useLayoutEffect","useEffect","textureArray","Texture$1","forEach","texture","initTexture","useMemo","keyed","i","key","preload","clear","plop","Audio","plopSound","_ref","args","v","THREE","onReset","isFloating","setIsFloating","useState","ref","api","useSphere","mass","material","restitution","position","Math","random","unsubscribe","subscribe","velocity","set","currentTime","play","_jsx","_Fragment","children","_jsxs","map","ballLogo","roughness","thickness","envMapIntensity","color"],"sourceRoot":""}