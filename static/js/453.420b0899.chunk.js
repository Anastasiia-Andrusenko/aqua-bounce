"use strict";(self.webpackChunkaqua_bounce=self.webpackChunkaqua_bounce||[]).push([[453],{975:(t,e,r)=>{r.r(e),r.d(e,{default:()=>c});var o=r(406),n=r(787),i=r(483);class a extends o.Mesh{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};super(t),this.isWater=!0;const r=this,n=void 0!==e.textureWidth?e.textureWidth:512,i=void 0!==e.textureHeight?e.textureHeight:512,a=void 0!==e.clipBias?e.clipBias:0,l=void 0!==e.alpha?e.alpha:1,s=void 0!==e.time?e.time:0,c=void 0!==e.waterNormals?e.waterNormals:null,u=void 0!==e.sunDirection?e.sunDirection:new o.Vector3(.70707,.70707,0),m=new o.Color(void 0!==e.sunColor?e.sunColor:16777215),d=new o.Color(void 0!==e.waterColor?e.waterColor:8355711),v=void 0!==e.eye?e.eye:new o.Vector3(0,0,0),f=void 0!==e.distortionScale?e.distortionScale:20,p=void 0!==e.side?e.side:o.FrontSide,x=void 0!==e.fog&&e.fog,g=new o.Plane,w=new o.Vector3,h=new o.Vector3,y=new o.Vector3,C=new o.Matrix4,M=new o.Vector3(0,0,-1),S=new o.Vector4,_=new o.Vector3,b=new o.Vector3,D=new o.Vector4,V=new o.Matrix4,P=new o.PerspectiveCamera,N=new o.WebGLRenderTarget(n,i),W={uniforms:o.UniformsUtils.merge([o.UniformsLib.fog,o.UniformsLib.lights,{normalSampler:{value:null},mirrorSampler:{value:null},alpha:{value:1},time:{value:0},size:{value:1},distortionScale:{value:20},textureMatrix:{value:new o.Matrix4},sunColor:{value:new o.Color(8355711)},sunDirection:{value:new o.Vector3(.70707,.70707,0)},eye:{value:new o.Vector3},waterColor:{value:new o.Color(5592405)}}]),vertexShader:"\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tuniform float time;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <shadowmap_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tmirrorCoord = modelMatrix * vec4( position, 1.0 );\n\t\t\t\t\tworldPosition = mirrorCoord.xyzw;\n\t\t\t\t\tmirrorCoord = textureMatrix * mirrorCoord;\n\t\t\t\t\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t#include <beginnormal_vertex>\n\t\t\t\t#include <defaultnormal_vertex>\n\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t#include <fog_vertex>\n\t\t\t\t#include <shadowmap_vertex>\n\t\t\t}",fragmentShader:`\n\t\t\t\tuniform sampler2D mirrorSampler;\n\t\t\t\tuniform float alpha;\n\t\t\t\tuniform float time;\n\t\t\t\tuniform float size;\n\t\t\t\tuniform float distortionScale;\n\t\t\t\tuniform sampler2D normalSampler;\n\t\t\t\tuniform vec3 sunColor;\n\t\t\t\tuniform vec3 sunDirection;\n\t\t\t\tuniform vec3 eye;\n\t\t\t\tuniform vec3 waterColor;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\tvec4 getNoise( vec2 uv ) {\n\t\t\t\t\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\n\t\t\t\t\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\n\t\t\t\t\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\n\t\t\t\t\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\n\t\t\t\t\tvec4 noise = texture2D( normalSampler, uv0 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv1 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv2 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv3 );\n\t\t\t\t\treturn noise * 0.5 - 1.0;\n\t\t\t\t}\n\n\t\t\t\tvoid sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {\n\t\t\t\t\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );\n\t\t\t\t\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );\n\t\t\t\t\tspecularColor += pow( direction, shiny ) * sunColor * spec;\n\t\t\t\t\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;\n\t\t\t\t}\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <packing>\n\t\t\t\t#include <bsdfs>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <lights_pars_begin>\n\t\t\t\t#include <shadowmap_pars_fragment>\n\t\t\t\t#include <shadowmask_pars_fragment>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\t\t\t\t\tvec4 noise = getNoise( worldPosition.xz * size );\n\t\t\t\t\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );\n\n\t\t\t\t\tvec3 diffuseLight = vec3(0.0);\n\t\t\t\t\tvec3 specularLight = vec3(0.0);\n\n\t\t\t\t\tvec3 worldToEye = eye-worldPosition.xyz;\n\t\t\t\t\tvec3 eyeDirection = normalize( worldToEye );\n\t\t\t\t\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );\n\n\t\t\t\t\tfloat distance = length(worldToEye);\n\n\t\t\t\t\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;\n\t\t\t\t\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );\n\n\t\t\t\t\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\n\t\t\t\t\tfloat rf0 = 0.3;\n\t\t\t\t\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );\n\t\t\t\t\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;\n\t\t\t\t\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);\n\t\t\t\t\tvec3 outgoingLight = albedo;\n\t\t\t\t\tgl_FragColor = vec4( outgoingLight, alpha );\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <${parseInt(o.REVISION.replace(/\D+/g,""))>=154?"colorspace_fragment":"encodings_fragment"}>\n\t\t\t\t\t#include <fog_fragment>\t\n\t\t\t\t}`},z=new o.ShaderMaterial({fragmentShader:W.fragmentShader,vertexShader:W.vertexShader,uniforms:o.UniformsUtils.clone(W.uniforms),lights:!0,side:p,fog:x});z.uniforms.mirrorSampler.value=N.texture,z.uniforms.textureMatrix.value=V,z.uniforms.alpha.value=l,z.uniforms.time.value=s,z.uniforms.normalSampler.value=c,z.uniforms.sunColor.value=m,z.uniforms.waterColor.value=d,z.uniforms.sunDirection.value=u,z.uniforms.distortionScale.value=f,z.uniforms.eye.value=v,r.material=z,r.onBeforeRender=function(t,e,o){if(h.setFromMatrixPosition(r.matrixWorld),y.setFromMatrixPosition(o.matrixWorld),C.extractRotation(r.matrixWorld),w.set(0,0,1),w.applyMatrix4(C),_.subVectors(h,y),_.dot(w)>0)return;_.reflect(w).negate(),_.add(h),C.extractRotation(o.matrixWorld),M.set(0,0,-1),M.applyMatrix4(C),M.add(y),b.subVectors(h,M),b.reflect(w).negate(),b.add(h),P.position.copy(_),P.up.set(0,1,0),P.up.applyMatrix4(C),P.up.reflect(w),P.lookAt(b),P.far=o.far,P.updateMatrixWorld(),P.projectionMatrix.copy(o.projectionMatrix),V.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),V.multiply(P.projectionMatrix),V.multiply(P.matrixWorldInverse),g.setFromNormalAndCoplanarPoint(w,h),g.applyMatrix4(P.matrixWorldInverse),S.set(g.normal.x,g.normal.y,g.normal.z,g.constant);const n=P.projectionMatrix;D.x=(Math.sign(S.x)+n.elements[8])/n.elements[0],D.y=(Math.sign(S.y)+n.elements[9])/n.elements[5],D.z=-1,D.w=(1+n.elements[10])/n.elements[14],S.multiplyScalar(2/S.dot(D)),n.elements[2]=S.x,n.elements[6]=S.y,n.elements[10]=S.z+1-a,n.elements[14]=S.w,v.setFromMatrixPosition(o.matrixWorld);const i=t.getRenderTarget(),l=t.xr.enabled,s=t.shadowMap.autoUpdate;r.visible=!1,t.xr.enabled=!1,t.shadowMap.autoUpdate=!1,t.setRenderTarget(N),t.state.buffers.depth.setMask(!0),!1===t.autoClear&&t.clear(),t.render(e,P),r.visible=!0,t.xr.enabled=l,t.shadowMap.autoUpdate=s,t.setRenderTarget(i);const c=o.viewport;void 0!==c&&t.state.viewport(c)}}}const l=r.p+"static/media/waternormals.c01acb52aeed9bdc6da3.jpeg";var s=r(723);(0,n.e)({Water:a});const c=()=>{const t=(0,i.useRef)(),e=(0,n.D)((t=>t.gl)),r=(0,n.H)(o.TextureLoader,l);r.wrapS=r.wrapT=o.RepeatWrapping;const a=(0,i.useMemo)((()=>new o.PlaneGeometry(1e4,1e4)),[]),c=(0,i.useMemo)((()=>({textureWidth:512,textureHeight:512,waterNormals:r,sunDirection:new o.Vector3,sunColor:255,waterColor:21983,distortionScale:3.7,fog:!0,format:e.encoding})),[r]);return(0,n.F)(((e,r)=>{t.current.material.uniforms.time.value+=.4*r})),(0,s.jsx)(s.Fragment,{children:(0,s.jsx)("water",{ref:t,args:[a,c],"rotation-x":-Math.PI/2})})}}}]);
//# sourceMappingURL=453.420b0899.chunk.js.map